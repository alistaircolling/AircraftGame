<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:components="view.components.*"
		 width="1920" height="1080" creationComplete="group1_creationCompleteHandler(event)">
	
	<fx:Script>
		<![CDATA[
			import com.greensock.TweenMax;
			
			import events.ChangeStateEvent;
			import events.SocketEvent;
			
			import model.vo.GraphResultsVO;
			
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			
			import signals.ChangeState;
			import signals.MusicVolumeSet;
			import signals.StatusUpdate;
			
			private var _iteration:uint;
			public var _currentAnim:MovieClip;
			
			private var inAir:*;
			private var onGround:*;
			
			public var whiteFlag:Number = 0;
			//	private var _planes:Planes;
			[Inject]
			public var statusUpdate:StatusUpdate;
			
			public static const ANIM_COMPLETED:String = "animCompleted";
			
			//used to store the graph data until the anim has finished
			private var _graphResults:GraphResultsVO;
			
			private var _animTimer:Timer;
			
			public var finalScore:Number= 0;
			private var _currentInAir:uint = 10;
			
			public function setData( vo:GraphResultsVO ):void{
				//clear the planes and panel
				showPanels(false);
				
				
				whiteFlag = vo.whiteFlag;
				finalScore = vo.finalScore;
				
				_graphResults = vo;
				
				_animTimer = new Timer(800, 1);
				_animTimer.addEventListener(TimerEvent.TIMER_COMPLETE, startAnim);
				_animTimer.start();
				 
				//set on the graph component
				graph.setData(vo);
				//
				
			}
			
			private function startAnim( t:TimerEvent = null ):void{
				_animTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, startAnim);
				_animTimer = null;
				//showInAir(10);
				_currentAnim.gotoAndPlay(2);
				//added to force the correct number of planes to shoe
				addEventListener(Event.ENTER_FRAME, oef);
				
			}
			
			protected function oef(event:Event):void
			{
				trace("--setting current in air from last time");
				removeEventListener(Event.ENTER_FRAME, oef);
				if (iteration==1){
					_currentInAir = graph._graphData.inAir[0];
				}
				showInAir(_currentInAir);
				
				
			}
			
			private function showPanels( b:Boolean ):void{
				var alph:uint = 0;
				if (b) {
					alph = 1;
					showSection(mainPanel, true);
					//TODO check if we need to show anything here, as land version shows all tanks at the start of the go.
				//	fadeInPlanes.play([inAir, onGround]);
				}else{
					mainPanel.alpha = alph;
					//inAir.alpha = alph;
					//onGround.alpha = alph;
				}
				
			}
			
			private function showSection( sect:Group, b:Boolean ):void{
				if(b){
					fadeIn.target = sect;
					fadeIn.play();
				}else{
					fadeOut.target = sect;
					fadeOut.play();
				}
			}
			
			public function setAnimation(type:String):void{
				
				//remove previous if it exists
				while(animHolder.numChildren>0) {
					animHolder.removeChildAt(0);
					if (_currentAnim){
						if (_currentAnim.hasEventListener(Event.COMPLETE)){
							_currentAnim.removeEventListener(Event.COMPLETE, animCompleted);
							_currentAnim = null;
						}
					}
				}
				_currentAnim = null;
				switch(type){
					case "plane":
						_currentAnim = new Takeoff();
						_currentAnim.x = 0;
						_currentAnim.y = 0;
						inAir = inAirPlanes;
						onGround = onGroundPlanes;
						
						break
					case "heli":
						_currentAnim = new HeliTakeoff();
						_currentAnim.x = 0-(1920/2);
						_currentAnim.y = 0-(1080/2);
						inAir = inAirHelis;
						onGround = onGroundHelis;
						break
					//TODO add the correct assets
					case "land":
						_currentAnim = new LandAnim();
						_currentAnim.x = 0;//-(1920/2);
						_currentAnim.y = 495;//-(1080/2);
						
					//	onGround = onGroundHelis;
						break
				}
				
				inAirPlanes.visible = false;
				onGroundPlanes.visible = false;
				inAirHelis.visible = false;
				onGroundHelis.visible = false;
			//	inAir.visible = false;
			//	onGround.visible = false;
				
				animHolder.addChild(_currentAnim);
				_currentAnim.addEventListener(Event.COMPLETE, animCompleted);
				//always hide white flag at start
				try{
				showWhiteFlagAnim(false);
				}catch(e:*){
					trace("!! unable to hide the white flag !!");
				}
				
			}
			
			private function showPanelsWait(t:TimerEvent):void{
				_animTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, startAnim);
				_animTimer = null;
				showPanels(true);
				
				
			}
			
			private function animCompleted( e:Event ):void{
				
				_animTimer = new Timer(100, 1);
				_animTimer.addEventListener(TimerEvent.TIMER_COMPLETE, showPanelsWait);
				_animTimer.start();
				
				var e:Event = new Event(ANIM_COMPLETED);
				dispatchEvent(e);
			}
			
			private function fadeCompleted():void{
				graph.setData(_graphResults);
			}
			
			public function showInAir( n:uint ):void{
				//inAir.showPlanes(n);
				trace("}}}}}} }}}}}} show in air:"+n);
				for (var i:int = 1; i <=10; i++) 
				{
					var child:* = (_currentAnim as LandAnim).tanks.getChildByName("l"+i);
					if (i<=n){
						TweenMax.to(child, .3, {alpha:1});
					}else{
						TweenMax.to(child, .3, {alpha:0});
					}
				}
				//used to store the val for the next go
				_currentInAir = n;
				
			}
			
			public function showOnGround( n:uint ):void{
				//onGround.showPlanes(n);
			}
			
			protected function continue_clickHandler(event:MouseEvent):void
			{
				//need to change the state to input
				var sock:SocketEvent = new SocketEvent("continue clicked iteration:"+_iteration);
				dispatchEvent(sock);
				if (_iteration <3){
					var e:ChangeStateEvent = new ChangeStateEvent(ChangeState.ENTER_SCREEN);	
					dispatchEvent(e);
					_currentAnim.gotoAndStop(1);
					
				}else{
					_currentAnim.removeEventListener(Event.COMPLETE, animCompleted);
					animHolder.removeChild(_currentAnim);
					_currentAnim = null;
					var f:ChangeStateEvent = new ChangeStateEvent(ChangeState.ENTER_SCREEN);
					f.state = ChangeState.FINAL_SCREEN;				
					dispatchEvent(f);
				}		
				
			}
			
			
			public function get iteration():uint
			{
				return _iteration;
			}
			
			public function set iteration(value:uint):void
			{
				_iteration = value;
				showTurn(_iteration);
				
				if (_iteration==1){
					graph.initPlanes();
				}
				
			}

			public function showTurn( n:uint ):void{
				for (var i:uint = 0; i<turnImageHolder.numElements; i++){
					var im:Image = turnImageHolder.getElementAt(i) as Image;
					if (i==n-1){
						im.includeInLayout = true;
						im.visible = true;
					}else{
						im.includeInLayout = false;
						im.visible = false;
					}
				}
			}

			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
			}
			
			protected function fadeIn_effectStartHandler(event:EffectEvent):void
			{
				(event.effectInstance.target as Group).visible = true;
			}
			
			
			protected function fadeOut_effectEndHandler(event:EffectEvent):void
			{
				(event.effectInstance.target as Group).visible = false;
			}


			protected function fadeIn_effectEndHandler(event:EffectEvent):void
			{
				graph.showData();
			}
			//TODO add the correct currency from the xml here

			private function showWhiteFlagAnim(param0:Boolean):void
			{
				trace("show white flag:"+param0);
				(_currentAnim as LandAnim).tanks.l1.tank.flag.visible = param0;
				
			}
			
			public function checkFlag():void
			{
				if (_iteration==3){
					if (finalScore<whiteFlag){
						showWhiteFlagAnim(true);
					}else{
						showWhiteFlagAnim(false);
					}}else{
						showWhiteFlagAnim(false);
						
					}
				
			}
			
			public function stopAnim():void
			{
				if (_currentAnim){
					_currentAnim.gotoAndStop(1);
				}
				
			}
			
			
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:Fade id="fadeIn" alphaTo="1" duration="2000" effectEnd="fadeIn_effectEndHandler(event)"
				effectStart="fadeIn_effectStartHandler(event)" startDelay="1000"/>
		<s:Fade id="fadeInPlanes" alphaTo="1" duration="2000"
				effectStart="fadeIn_effectStartHandler(event)" startDelay="1000"/>
		<s:Fade id="fadeOut" alphaTo="0" duration="1500" effectEnd="fadeOut_effectEndHandler(event)"/>
	</fx:Declarations>
	<components:InAirHelis id="inAirHelis"/>
	<components:OnGroundHelis id="onGroundHelis"/>
	<components:InAirPlanes id="inAirPlanes" x="510" top="20"/>
	<components:OnGroundPlanes id="onGroundPlanes" x="110" bottom="-10"/>
	<mx:UIComponent id="animHolder" top="50" alpha="1" horizontalCenter="0"/>
	<s:Group id="mainPanel" width="1148" height="516" horizontalCenter="0" verticalCenter="-250">
<!--		<mx:Image source="@Embed('../embed/graph.png')" width="1148" height="516" smoothBitmapContent="true" /> -->
		<mx:Image width="1148" height="516" smoothBitmapContent="true"
				  source="@Embed('../embed/graph-land.png')"/>
		<components:GraphComponent id="graph" x="-2" y="10"/>
		<s:HGroup id="turnImageHolder" left="55" top="65" width="345" height="28">
			<mx:Image id="turn1" includeInLayout="true" smoothBitmapContent="true"
					  source="@Embed('../embed/results1.png')"/>
			<mx:Image id="turn2" visible="false" includeInLayout="false" smoothBitmapContent="true"
					  source="@Embed('../embed/results2.png')"/>
			<mx:Image id="turn3" visible="false" includeInLayout="false" smoothBitmapContent="true"
					  source="@Embed('../embed/results3.png')"/>
		</s:HGroup>
		<s:HGroup left="414" top="71" gap="0">
			<s:Label styleName="legend" text=" Monthly Profit / Loss "/>
				<mx:Spacer width="3"/>
			<s:Group>
			<mx:Image y="-2" scaleX=".9" scaleY=".9" smoothBitmapContent="true" includeInLayout="true"
					  source="@Embed('../embed/greyCurrSmall.png')"/>
			</s:Group>
			<s:Label styleName="legend" text="m"/>
		</s:HGroup>
		<s:Label left="650" top="71" styleName="legend" text="% Military Output"/>
		<components:CustomButton id="continueBtn" right="55" top="52"
								 click="continue_clickHandler(event)"/>
	</s:Group>
	
	
	
</s:Group>
