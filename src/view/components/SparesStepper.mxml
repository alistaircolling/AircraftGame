<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:components="view.components.*"
		 creationComplete="group1_creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import events.LeverEvent;
			import events.NumberEvent;
			
			import mx.events.FlexEvent;
			
			[Bindable]
			public var title:String;
			[Bindable]
			public var totalRects:uint;
			[Bindable]
			public var currentRects:uint;
			
			public var sparesInc:Number;
			public var costInc:Number;
			private var _sparesCurr:Number; 
			private var _sparesInit:Number; //value passed at the start of each turn
			private var _budget:Number; 
			
			public var vidId:uint;
			public var sparesStartingValue:Number;
			
			//hides both buttons so nothing can be pressed
			private var _downClicked:Boolean;
			
			public function disable():void{
				
				up.visible = false;
				down.visible = false;
				
			}
			
			protected function down_clickHandler(event:MouseEvent):void{
				_downClicked = true;
				//check that the value is not going below min
				if(sparesCurr - sparesInc >= sparesInit){
					
					sparesCurr -= sparesInc;
					
				}else{
					
					trace("at the bottom value");
				}
			//	volStepper.value = sparesCurr-sparesInit;
			//	trace("down -----volstepper value set :"+volStepper.value);
				if (volStepper.totalRects-volStepper.value>0){
					up.visible = true;
				}
			}
			
			
			protected function up_clickHandler(event:MouseEvent):void{
				_downClicked = false;
				//check the upper limit of the budget
				trace("maxspares:"+maxSpares);
				var maxSpares:uint = Math.floor(budget/costInc);
				//prevent the user adding more than 20 spares
				trace("remaining spares:"+(volStepper.totalRects-volStepper.value));
				if (maxSpares>(volStepper.totalRects-volStepper.value)){
					maxSpares = volStepper.totalRects-volStepper.value;
					trace("max spares set to remaining:"+maxSpares);
					if (maxSpares==1){
						up.visible = false;
					}
				}
				//if there is some budget left for spares increase 
				if (maxSpares>0){
					sparesCurr += sparesInc;
				}else{
					up.visible = false;
					trace("no budget left for spares");
				}
				
			//	volStepper.value = sparesCurr-sparesInit;
				if (volStepper.totalRects-volStepper.value==0){
					up.visible = false;
				}
				
			}
			
			public function get budget():Number
			{
				return _budget;
			}
			
			public function set budget(value:Number):void
			{
				trace("set budget");
				_budget = value;
				//every time the budget is set regenerate the vector for the stepper  --budget should be set after the vo
				//if the value is negative then disable the spares buttons
				if (_budget<costInc ){
					up.visible = false;
					down.visible = false;
				}else{
					down.visible = true;
					if  (volStepper.totalRects-volStepper.value>1){
						up.visible = true;
					}else{
						up.visible = false;
					}
				}
				checkIfCanBuyMoreSpares();
			}
			
			public function get sparesInit():Number
			{
				return _sparesInit;
			}
			
			
			public function set sparesInit(value:Number):void
			{
				_sparesInit = value;
				
				//make the  down button inv
				down.visible = false;
				volStepper.value = 0;
				trace("--------- set spares init volStepper val:"+volStepper.value);
			}
			
			public function get sparesCurr():Number
			{
				return _sparesCurr;
			}
			
			//updates the spares on the initial turn iteration without updating balance (this is set by system rather than user interaction)
			public function systemUpdateSpares( value:Number ):void{
				trace("--------- system update spares");
				_sparesCurr = value;
				valLabel.text = value.toString();
				checkIfCanBuyMoreSpares();
			}
			
			public function set sparesCurr(value:Number):void
			{
				trace("set spare curr:"+value+"  init:"+_sparesInit);
				//only update the difference if _sparesCurr is defined as it will error on the first load	
				var diff:Number;
				
				if (!_sparesCurr){
					diff = 0;
				}else{
					diff = _sparesCurr - value;
				}
				_sparesCurr = value;
				valLabel.text = value.toString();
				//check if this isnt the minimum
				if (_sparesCurr>_sparesInit){
					down.visible = true;
				}else{
					down.visible = false;
				}
				
				var maxSpares:uint = Math.floor(budget/costInc);
				if (maxSpares>0){// && (volStepper.totalRects-volStepper.value>1)){
					up.visible = true;
				}else{
					up.visible = false;
				}
				
				updateBalance(diff*costInc);
				volStepper.value = _sparesCurr-sparesStartingValue;
				trace("------------------------set spares Curr volstepper value:"+volStepper.value);
			}
			
			private function updateBalance( n:Number ):void{
				if (n!=0){
					_budget += n;
					var e:NumberEvent = new NumberEvent(NumberEvent.BALANCE_UPDATE,	n);
					dispatchEvent(e);
				}
				checkIfCanBuyMoreSpares(); //used to check once the budget is updated
			}
			
			private function checkIfCanBuyMoreSpares():void{
				trace(" - - -  check if can buy more spares - - - ");
				trace("_sparesCur:"+_sparesCurr+"  _sparesInit:"+_sparesInit+" remaining rects:"+ (volStepper.totalRects - volStepper.value));
				var maxSpares:uint = Math.floor(budget/costInc);
				if (maxSpares>0 ){
					up.visible = true;
				}else{
					up.visible = false;
				}
				if (_sparesCurr>_sparesInit){
					down.visible = true;
				}else{
					down.visible = false;
				}
				
				volStepper.value = _sparesCurr-sparesStartingValue;
				trace("------------------------checkIfCanBuyMoreSpares volstepper value:"+volStepper.value);
			}
			
			
			protected function infoButton_clickHandler(event:MouseEvent):void
			{
				var e:LeverEvent = new LeverEvent(LeverEvent.CLICKED);
				e.vidID = vidId;
				dispatchEvent(e);
			}
			
			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				down.addEventListener(MouseEvent.CLICK, down_clickHandler);
				up.addEventListener(MouseEvent.CLICK, up_clickHandler);
				
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:Group width="100%" height="100%" verticalCenter="0">
		<components:InformationButton id="infoButton" x="-60" y="3"
									  click="infoButton_clickHandler(event)"/>
		<s:Label x="18" top="23" styleName="supportPanelCategory" text="{title}" verticalAlign="middle"
				 verticalCenter="0"/>
		<s:HGroup x="150" y="5" width="540" height="100%" verticalAlign="middle">
			<!--		<s:Label id="unitLabel" height="100%" styleName="supportPanelCategoryItalic"
			text="{unit}" verticalAlign="middle" verticalCenter="0"/>-->
			<components:UpArrowButton id="down" skinClass="view.skins.DownMinusButtonSkin"/>
			<s:Label id="valLabel" horizontalCenter="0" includeInLayout="false"
					 styleName="supportPanelCategoryNumber" text="---" textAlign="center"
					 verticalAlign="middle" verticalCenter="0"/>
			<components:VolumeStepper id="volStepper" horiPadding="3" totalRects="{totalRects}"/>
			
			<components:UpArrowButton id="up" top="1" skinClass="view.skins.UpPlusButtonSkin"/>
		</s:HGroup>
	</s:Group>
</s:Group>
